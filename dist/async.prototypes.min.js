var AsynPrototypes;(()=>{var t={409:t=>{class e{native_prototypes;static indexed_collections=[Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,BigInt64Array,BigUint64Array,Float32Array,Float64Array];static init(){e.native_prototypes={};for(const t of e.indexed_collections)e.native_prototypes[t.name]={map:t.prototype.map,every:t.prototype.every,some:t.prototype.some,flatMap:t.prototype.flatMap,find:t.prototype.find,filter:t.prototype.filter,reduce:t.prototype.reduce,reduceRight:t.prototype.reduceRight}}static registerAll(){for(const t of e.indexed_collections)t.prototype.map=e.map,t.prototype.every=e.every,t.prototype.some=e.some,t.prototype.find=e.find,t.prototype.filter=e.filter,t.prototype.reduce=e.reduce,t.prototype.reduceRight=e.reduceRight,"Array"===t.name&&(t.prototype.flatMap=e.flatMap)}static unregisterAll(){for(const t of e.indexed_collections){const n=e.native_prototypes[t.name];t.prototype.map=n.map,t.prototype.every=n.every,t.prototype.some=n.some,t.prototype.flatMap=n.flatMap,t.prototype.find=n.find,t.prototype.filter=n.filter,t.prototype.reduce=n.reduce,t.prototype.reduceRight=n.reduceRight}}static hook(t){return e.native_prototypes[t.constructor.name]&&(t.map=e.asyncMap.bind(t),t.every=e.asyncEvery.bind(t),t.some=e.asyncSome.bind(t),t.find=e.asyncFind.bind(t),t.filter=e.asyncFilter.bind(t),t.reduce=e.asyncReduce.bind(t),t.reduceRight=e.asyncReduceRight.bind(t),"Array"===t.constructor.name&&(t.flatMap=e.asyncFlatMap)),t}static unhook(t){return e.native_prototypes[t.constructor.name]&&(delete t.map,delete t.every,delete t.some,delete t.find,delete t.filter,delete t.reduce,delete t.reduceRight,"Array"===t.constructor.name&&delete t.flatMap),t}static async asyncEvery(t,e=void 0){for(let n=0;n<this.length;n++)if(!await t.call(e,this[n]))return!1;return!0}static every(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].every.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncEvery.call(this,t,n);throw"something is wrong with this function!"}static async asyncSome(t,e=void 0){for(let n=0;n<this.length;n++)if(await t.call(e,this[n]))return!0;return!1}static some(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].some.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncSome.call(this,t,n);throw"something is wrong with this function!"}static async asyncFind(t,e=void 0){for(let n=0;n<this.length;n++)if(await t.call(e,this[n]))return this[n]}static find(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].find.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncFind.call(this,t,n);throw"something is wrong with this function!"}static async asyncFilter(t,n=void 0){const r=await Promise.all(e.native_prototypes[this.constructor.name].map.call(this,t));return this.filter(((t,e)=>r[e]))}static filter(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].filter.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncFilter.call(this,t,n);throw"something is wrong with this function!"}static async asyncMap(t,n=void 0){const r=e.native_prototypes[this.constructor.name].map.call(this,t,n);for(const t in r)r[t]=await r[t];return r}static map(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].map.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncMap.call(this,t,n);throw"something is wrong with this function!"}static async asyncFlatMap(t,n=void 0){const r=e.native_prototypes[this.constructor.name].map.call(this,t,n);for(const t in r)r[t]=await r[t];return r.flat()}static flatMap(t,n=void 0){if("Function"===t.constructor.name)return e.native_prototypes[this.constructor.name].flatMap.call(this,t,n);if("AsyncFunction"===t.constructor.name)return e.asyncFlatMap.call(this,t,n);throw"something is wrong with this function!"}static async asyncReduce(t,e){if(!this.length)throw TypeError("an array with no elements cannot be reduced.");for(let n=0;n<this.length;n++)e=0!==n||1!==arguments.length?await t.call(void 0,e,this[n],n,this):this[0];return e}static reduce(t,n){if("Function"===t.constructor.name)return 1===arguments.length?e.native_prototypes[this.constructor.name].reduce.call(this,t):e.native_prototypes[this.constructor.name].reduce.call(this,t,n);if("AsyncFunction"===t.constructor.name)return 1===arguments.length?e.asyncReduce.call(this,t):e.asyncReduce.call(this,t,n);throw"something is wrong with this function!"}static async asyncReduceRight(t,e){if(!this.length)throw TypeError("an array with no elements cannot be reduced.");const n=this.length-1;for(let r=n;r>=0;r--)e=r!==n||1!==arguments.length?await t.call(void 0,e,this[r],r,this):this[n];return e}static reduceRight(t,n){if("Function"===t.constructor.name)return 1===arguments.length?e.native_prototypes[this.constructor.name].reduceRight.call(this,t):e.native_prototypes[this.constructor.name].reduceRight.call(this,t,n);if("AsyncFunction"===t.constructor.name)return 1===arguments.length?e.asyncReduceRight.call(this,t):e.asyncReduceRight.call(this,t,n);throw"something is wrong with this function!"}}e.init(),t.exports=e}},e={},n=function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(409);AsynPrototypes=n})();